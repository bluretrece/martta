use std::str::FromStr;
use crate::ast::*;

grammar;

pub Prog: Prog = {
    <stmts: Stmt* > => Prog::Body(stmts) ,
}

pub Stmt: Stmt = {
    <expr:Expr> ";"? => Stmt::Expr(expr),
    "let" <name:Ident> ":" <t:Ascription> "=" <rhs:Expr> ";"? => Stmt::Assign(name, rhs, t),
    <variable:Ident> "=" <rhs:Expr> ";" => Stmt::ReAssign(variable, rhs),
    "while" <cond:Expr> <stmts:Block> => Stmt::While(cond, stmts),
    "fn" <i:Ident> "::" <args:ParamList> "=>"<return_type:Ascription> <stmts:Block> => Stmt::Func(i, args, stmts, return_type),
    "class" <name: Ident> <stmts:Block> => Stmt::Class(name, stmts),
    "return" <expr:Expr> ";"? => Stmt::Return(expr),
    <ifstmt:IfStmt> => ifstmt,
}

pub Ascription: Ascription = {
    "int" => Ascription::Int,
    "bool" => Ascription::Bool,
    "string" => Ascription::Str
}

pub ParamList: Vec<String> = {
    () => vec![],
    <head:Ident> => vec![head],
    <head:Ident> "," <tail:ParamList> => {
        let mut list = tail.clone();
        list.insert(0, head);

        list
    },
}

pub IfStmt: Stmt = {
    "if" <cond:Expr> "{" <stmts:Stmt*> "}" => Stmt::IfStatement(cond, stmts),
    "if" <cond:Expr> "{" <stmts:Stmt*> "}" "else"? "{" <estmts:Stmt*> "}" => Stmt::IfElse(cond, stmts, estmts),
}

pub Block: Vec<Stmt> = {
    "{" <stmts:Stmt*> "}" => stmts,
}

pub Expr: Expr = {
    <lhs: Expr> <op:Operator> <rhs:Expr_> => Expr::Binary(Box::new( lhs ), op , Box::new( rhs )),
    <expr:Expr_> => expr
}

pub Operator: Operator = {
    "+" => Operator::Add,
    "-" => Operator::Sub,
    "/" => Operator::Div,
    "||" => Operator::Or,
    "&&" => Operator::And,
    "<" => Operator::LessThan,
    "<=" => Operator::LessOrEqual,
    ">" => Operator::GreaterThan,
    "==" => Operator::EqTo,
    "+=" => Operator::SumTo,
}
pub Expr_: Expr = {
    <v:IntegerLiteral> => Expr::Int(v),
    <s:StringLiteral> => Expr::Str(s),
    <f:Ident> "(" <args:ExprList> ")" => Expr::Call(Call::Function(Function {func: f, args: args})),
    <f:Ident> "()" => Expr::Call(Call::Class(Class {identifier: f})),
    <name:Ident> => Expr::Var(name),
    "|" <args:ParamList> "|" "=>" <stmts:Block> => Expr::Function(args, stmts),
    "true" => Expr::Bool(true),
    "false" => Expr::Bool(false),
    "[" <list:ExprList> "]" => Expr::List(list),
}

pub ExprList: Vec<Expr> = {
    () => vec![],
    <head:Expr> => vec![head],
    <head:Expr> "," <tail:ExprList> => {
	let mut list = tail.clone();
	list.insert(0, head);

	list
    },
}

Ident: String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_string(),
};

IntegerLiteral: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

StringLiteral: String = {
    <s:r"'[^']*'"> => s.trim_matches('\'').to_string(),
};

match {
    r"\s*" => {},
    r"#[^\n\r]*[\n\r]*" => {},
    _,
}
